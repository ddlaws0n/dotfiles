{{/*
  Modern secret management functions for chezmoi templates

  Usage:
    {{ template "getSecret" dict "key" "openrouter_api_key" "data" . }}
    {{ template "getWorkSecret" dict "key" "airtable_api_key" "data" . }}
    {{ template "getApiKey" dict "service" "openrouter" "data" . }}
    {{ template "exportSecret" dict "varName" "OPENROUTER_API_KEY" "key" "openrouter_api_key" "data" . }}
*/}}

{{/*
  getSecret - Retrieve personal secrets from 1Password
  Parameters:
    - key: The secret key from .chezmoidata/secrets.yaml
    - data: The template data context (.)
*/}}
{{- define "getSecret" -}}
{{- if and .data.use_secrets (not .data.is_ci_workflow) -}}
{{- if and .data.secrets (hasKey .data.secrets .key) -}}
{{- $secretPath := index .data.secrets .key -}}
{{- $vault := .data.personal_vault_name | default "my" -}}
{{- onepasswordRead $secretPath $vault -}}
{{- end -}}
{{- end -}}
{{- end -}}

{{/*
  getWorkSecret - Retrieve work secrets from 1Password
  Parameters:
    - key: The secret key from .chezmoidata/secrets.yaml work_secrets section
    - data: The template data context (.)
*/}}
{{- define "getWorkSecret" -}}
{{- if and .data.use_secrets (not .data.is_ci_workflow) .data.work_computer -}}
{{- if and .data.work_secrets (hasKey .data.work_secrets .key) -}}
{{- $secretPath := index .data.work_secrets .key -}}
{{- $vault := .data.work_vault_name | default "wizio" -}}
{{- onepasswordRead $secretPath $vault -}}
{{- end -}}
{{- end -}}
{{- end -}}

{{/*
  getApiKey - Convenience function for personal API keys
  Parameters:
    - service: Service name (e.g., "openrouter", "firecrawl")
    - data: The template data context (.)
*/}}
{{- define "getApiKey" -}}
{{- $key := printf "%s_api_key" .service -}}
{{- template "getSecret" dict "key" $key "data" .data -}}
{{- end -}}

{{/*
  getWorkApiKey - Convenience function for work API keys
  Parameters:
    - service: Service name (e.g., "airtable")
    - data: The template data context (.)
*/}}
{{- define "getWorkApiKey" -}}
{{- $key := printf "%s_api_key" .service -}}
{{- template "getWorkSecret" dict "key" $key "data" .data -}}
{{- end -}}

{{/*
  exportSecret - Export a personal secret as environment variable
  Parameters:
    - varName: Environment variable name
    - key: The secret key
    - data: The template data context (.)
*/}}
{{- define "exportSecret" -}}
{{- if and .data.use_secrets (not .data.is_ci_workflow) -}}
{{- if and .data.secrets (hasKey .data.secrets .key) -}}
{{- $secretPath := index .data.secrets .key -}}
{{- $vault := .data.personal_vault_name | default "my" -}}
export {{ .varName }}="{{ onepasswordRead $secretPath $vault }}"
{{- end -}}
{{- end -}}
{{- end -}}

{{/*
  exportWorkSecret - Export a work secret as environment variable
  Parameters:
    - varName: Environment variable name
    - key: The secret key
    - data: The template data context (.)
*/}}
{{- define "exportWorkSecret" -}}
{{- if and .data.use_secrets (not .data.is_ci_workflow) .data.work_computer -}}
{{- if and .data.work_secrets (hasKey .data.work_secrets .key) -}}
{{- $secretPath := index .data.work_secrets .key -}}
{{- $vault := .data.work_vault_name | default "wizio" -}}
export {{ .varName }}="{{ onepasswordRead $secretPath $vault }}"
{{- end -}}
{{- end -}}
{{- end -}}

{{/*
  exportApiKey - Export a personal API key as environment variable
  Parameters:
    - service: Service name (e.g., "openrouter")
    - data: The template data context (.)
*/}}
{{- define "exportApiKey" -}}
{{- $key := printf "%s_api_key" .service -}}
{{- $varName := printf "%s_API_KEY" (.service | upper) -}}
{{- template "exportSecret" dict "varName" $varName "key" $key "data" .data -}}
{{- end -}}

{{/*
  exportWorkApiKey - Export a work API key as environment variable
  Parameters:
    - service: Service name (e.g., "airtable")
    - data: The template data context (.)
*/}}
{{- define "exportWorkApiKey" -}}
{{- $key := printf "%s_api_key" .service -}}
{{- $varName := printf "%s_API_KEY" (.service | upper) -}}
{{- template "exportWorkSecret" dict "varName" $varName "key" $key "data" .data -}}
{{- end -}}

{{/*
  hasSecret - Check if a personal secret exists
  Parameters:
    - key: The secret key
    - data: The template data context (.)
*/}}
{{- define "hasSecret" -}}
{{- and .data.use_secrets (not .data.is_ci_workflow) .data.secrets (hasKey .data.secrets .key) -}}
{{- end -}}

{{/*
  hasWorkSecret - Check if a work secret exists
  Parameters:
    - key: The secret key
    - data: The template data context (.)
*/}}
{{- define "hasWorkSecret" -}}
{{- and .data.use_secrets (not .data.is_ci_workflow) .data.work_computer .data.work_secrets (hasKey .data.work_secrets .key) -}}
{{- end -}}

{{/*
  getVaultName - Get vault name from configuration (DEPRECATED - use specific functions)
  Parameters:
    - type: "personal" or "work"
    - data: The template data context (.)
*/}}
{{- define "getVaultName" -}}
{{- if eq .type "work" -}}
{{- .data.work_vault_name | default "wizio" -}}
{{- else -}}
{{- .data.personal_vault_name | default "my" -}}
{{- end -}}
{{- end -}}

{{/*
  secretsEnabled - Check if secrets are enabled and available
  Parameters:
    - data: The template data context (.)
*/}}
{{- define "secretsEnabled" -}}
{{- and .data.use_secrets (not .data.is_ci_workflow) -}}
{{- end -}}

{{/*
  workSecretsEnabled - Check if work secrets are enabled and available
  Parameters:
    - data: The template data context (.)
*/}}
{{- define "workSecretsEnabled" -}}
{{- and .data.use_secrets (not .data.is_ci_workflow) .data.work_computer -}}
{{- end -}}