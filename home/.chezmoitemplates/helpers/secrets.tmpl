{{/*
  Reusable secret management functions for chezmoi templates
  
  Usage:
    {{ template "getSecret" dict "key" "openrouter_api_key" "vault" "my" "data" . }}
    {{ template "getApiKey" dict "service" "openrouter" "data" . }}
*/}}

{{/* 
  getSecret - Generic function to retrieve secrets from 1Password
  Parameters:
    - key: The secret key from .chezmoidata/secrets.yaml
    - vault: The vault name (defaults to "my")
    - data: The template data context (.)
*/}}
{{- define "getSecret" -}}
{{- $vault := .vault | default "my" -}}
{{- if and .data.use_secrets (not .data.is_ci_workflow) -}}
{{- if hasKey .data "secrets" -}}
{{- $secretPath := index .data.secrets .key -}}
{{- if $secretPath -}}
{{- onepasswordRead $secretPath $vault -}}
{{- end -}}
{{- else -}}
{{- /* Fallback to legacy onepassword.toml format */ -}}
{{- $legacyKey := printf "%s.%s" $vault .key -}}
{{- if hasKey .data $legacyKey -}}
{{- onepasswordRead (index .data $legacyKey) $vault -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}

{{/*
  getApiKey - Convenience function for API keys
  Parameters:
    - service: Service name (e.g., "openrouter", "firecrawl")
    - data: The template data context (.)
*/}}
{{- define "getApiKey" -}}
{{- $key := printf "%s_api_key" .service -}}
{{- template "getSecret" dict "key" $key "data" .data -}}
{{- end -}}

{{/*
  exportSecret - Export a secret as an environment variable
  Parameters:
    - varName: Environment variable name
    - key: The secret key
    - vault: The vault name (optional, defaults to "my")
    - data: The template data context (.)
*/}}
{{- define "exportSecret" -}}
{{- $vault := .vault | default "my" -}}
{{- if and .data.use_secrets (not .data.is_ci_workflow) -}}
{{- if hasKey .data "secrets" -}}
{{- $secretPath := index .data.secrets .key -}}
{{- if $secretPath -}}
export {{ .varName }}="{{ onepasswordRead $secretPath $vault }}"
{{- end -}}
{{- else -}}
{{- /* Fallback to legacy onepassword.toml format */ -}}
{{- $legacyKey := printf "%s.%s" $vault .key -}}
{{- if hasKey .data $legacyKey -}}
export {{ .varName }}="{{ onepasswordRead (index .data $legacyKey) $vault }}"
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}

{{/*
  getVaultName - Get vault name from configuration
  Parameters:
    - type: "personal" or "work"
    - data: The template data context (.)
*/}}
{{- define "getVaultName" -}}
{{- if and .data.vaults (hasKey .data.vaults .type) -}}
{{- index .data.vaults .type -}}
{{- else -}}
{{- /* Fallback defaults */ -}}
{{- if eq .type "work" -}}wizio{{- else -}}my{{- end -}}
{{- end -}}
{{- end -}}